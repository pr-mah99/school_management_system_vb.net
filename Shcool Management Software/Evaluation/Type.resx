<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE6xiQ1OsYkNAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAqooYTYt8IaScjZ+rmobovq6a/LSc
        g/iunYjlmJaMmUCAgAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAu+7uD5+fleTPn3f/zJxy/+DV
        w//PqoX/z593/7mSdf+u5N66ctT0L1zM/xkAAAAAAAAAAAAAAAAAAAAAgP//Arft5ruXoKL/z6B4/8qb
        bv/r8Oz/0LCM/8+geP+tjHf/t+3m/7Hq6Lpg3/8IAAAAAAAAAAAAAAAAVc7/FWzV97a27eb/q9vW/5qa
        mP+1k3b/0dXW/8ivl/+fkYn/mLCz/7ft5v+37eb/tu3nVAAAAAAAAAAAAAAAAFXV/wyG3fDTt+3m/7ft
        5v+37eb/hq2+/3Cbz/9zmLz/sebg/7ft5v+37eb/t+3m/7fu5rAAAAAAAAAAAAAAAAAAAAAAyfLs5sPw
        6v+37eb/odDT/26Xy/9qksz/bprX/3+owP+37eb/t+3m/7ft5v+37ebeAAAAAAAAAAAAAAAAAAAAALru
        5+C57ef/t+3m/3ifuv9mj8f/b5vX/2yV0f9gga3/tOjj/7ft5v+37eb/t+3m3gAAAAAAAAAAAAAAAAAA
        AAC27OWzt+3m/4i0wv+Ep7L/WHWr/2SIwv9TbaP/WWyQ/7ft5v+37eb/t+3m/7fu5rAAAAAAAAAAAAAA
        AAAAAAAAt+7lWLft5v+KtcH/ncrL/3t2hv+JgIj/hHqG/2Jsh/+26+X/t+3m/8Dv6f+27edUAAAAAAAA
        AAAAAAAAAAAAAID//wK37ea7mMDA/520sf+smY//taCP/7Gcj/+eoJr/pcvH/7bs5f+37ea3TbOZClWq
        qgMAAAAAAAAAAAAAAAAAAAAAu+7uD67h3L6gvrv/oKmi/6Sckv+io5r/n7Ov/6jTz/+37ea3tu3tDkas
        hihAs4wUAAAAAAAAAAAAAAAAAAAAAAAAAAD///8BuO3mU7ft5rm37ebdt+3m3bft5re37OZR////ARq8
        8EUZvPHFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAmf8FHL32GwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA+B8AAPAPAADgBwAAwAcAAMADAADAAwAAwAMAAMAD
        AADgBwAA4AcAAPAPAAD8OwAA//8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEav
        hzNHrYoyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAARa2IZ0avh2YAAAAAAAAAADc+UyVxb3ScgoB81I6Fe+ialZH4jod+8IuGfuV/gYDNbnJ8hlVx
        jgkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFRXC+FfnrKqYlw/c6feP/PoHj/zaF6/+js5P/NoXj/z6B4/8+g
        eP++km3/j4J3+3p5eMRaeHgRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABxj5pEnIR0+8+geP/OnnX/z6B4/86edf/OqIH/7/z9/8qf
        dP/Pn3f/z6B4/86edf/PoHj/qodw/6XW09u36+UnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuOvnQaHQzfKwjHP/z6B4/8+geP/PoHj/yJVn/9jC
        qP/v/P3/0LCM/8qbb//PoHj/z6B4/8+geP+egHD/sOPe/7ft5u627+c/Wc77jFjN+mUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALnw6CG37ebrq93Y/6GDc//PoHj/z6B4/86e
        dv/Bi1f/4tvM/+/8/f/byrT/xJNh/8+geP/PoHj/z6B4/5N7cP+26+X/t+3m/7fs5uqE2u8+Wcj/FwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC2/9sHt+3m2bft5v+27OX/hnp5/8+g
        eP/PoHj/z593/8aUZP/q7+r/7/z9/+Xi1v/Jm2//z6B4/8+geP/PoHj/i3t2/7ft5v+37eb/t+3m/7ft
        5teq/9UGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACA//8CWMz8WpXh7om37eb/t+3m/7ft
        5v+Nq7H/kXt0/8qdd//IlWf/xJFf/+/8/f/v/P3/7PXz/8GLV//Lmm7/xJl1/4p7dv+Qqa3/t+3m/7ft
        5v+37eb/t+3m/7fu52oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFrN+mBZzfv/Xs/5/rXs
        5/+37eb/t+3m/7ft5v+u4dz/gZaf/4V+f/+ujG//p7bK/2yVzf+ltMr/qohs/4SDif+Mq7L/tuvl/7ft
        5v+37eb/t+3m/7ft5v+37eb/t+3m6b///wQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWsz7QVnN
        +/tp0/j/tu3m/7ft5v+37eb/t+3m/7ft5v+37eb/t+3m/2qJof9hhbv/ZYm9/12Atf92lqb/t+3m/7ft
        5v+37eb/t+3m/7ft5v+37eb/t+3m/7ft5v+37eb/uO7mPQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAruzokbXs5v+37eb/t+3m/7ft5v+37eb/t+3m/7ft5v+Pt77/Z4q4/3Ge2/9xntv/cZ7b/2mL
        sf+bx8n/t+3m/7ft5v+37eb/t+3m/7ft5v+37eb/t+3m/7ft5v+27OeJAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAC47uavv+/p/7zu6P+37eb/t+3m/7ft5v+37eb/sOTe/2eJrv9wndr/bJbS/2iQ
        yv9sltH/cZ7b/2uKqf+27OX/t+3m/7ft5v+37eb/t+3m/7ft5v+37eb/t+3m/7ft5q4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAALft5svv+/r/4/j1/7ft5v+37eb/t+3m/7ft5v9tjKT/aZHK/3Cd
        2f9xndn/aZHL/3Gd2v9xndn/ZovB/3qcrv+37eb/t+3m/7ft5v+37eb/t+3m/7ft5v+37eb/t+3myQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAt+3mysHv6f++7+j/t+3m/7ft5v+37eb/oc3M/2SK
        vf9oj8n/cZ7b/3Ge2/9xntv/cZ7b/3Ge2/9nj8f/YoOt/7Ln4f+37eb/t+3m/7ft5v+37eb/t+3m/7ft
        5v+37ebJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC37uext+3m/7ft5v+37eb/t+3m/7ft
        5v+ax8r/U22Z/16At/9gg7r/ZYrE/3Ge2/9ki8P/YoW9/1dzqP9Ycpz/rd/b/7ft5v+37eb/t+3m/7ft
        5v+37eb/t+3m/7ft5q4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALbt5oy37eb/t+3m/7ft
        5v+37eb/irK5/7ft5v9ecY3/U26h/1x8sv9ggbj/cZ7b/119sv9ggrn/SVqI/460vf+37eb/t+3m/7ft
        5v+37eb/t+3m/7ft5v+37eb/tuzniQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAue3lRbft
        5v+37eb/t+3m/5C8wv9bgan/r+Hc/1Nhgv9FVYb/cZ3a/15+uP9ad7D/O0R3/0ZXjP8yNGP/eZeo/7ft
        5v+37eb/t+3m/7ft5v+37eb/t+3m/7ft5v+27OhCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADM//8Ft+3m67ft5v+37eb/kLrC/1V0mv+o2Nb/eJao/zM3Y/9RWX3/Uk1p/1JNav9QTGj/Pjxg/y0u
        XP9cboz/tOjj/7ft5v+37eb/t+3m/7ft5v+87uj/t+3m6b///wQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAC47uV2t+3m/7ft5v+37eb/ia+z/7ft5v+axsj/j4SH/9PAr//Sv67/uqqh/9PA
        r//Nu6v/bGl3/7Xq4/+37eb/t+3m/7ft5v+37eb/t+3m/+D39P+47edzAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAALb/2we37ebZt+3m/7ft5v+Jr7P/t+3m/53JyP+Rh4f/mIqH/5iJ
        g/+rmIr/lYeD/5iLiP99foT/tevk/7ft5v+37eb/t+3m/7ft5v+37eb/t+3m16r/1QYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALfu4y637ebztOjj/3CDjP+Nl5f/koqG/72n
        kv/Hrpf/x66X/8eul//Hrpf/x66X/7ehj/+Rjov/ipiZ/5C0tf+27OX/t+3m/7ft5vK17ugtAAAAAESt
        hyJOsYkNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALjr50G37ebwl72+/4aX
        mf+Pj43/q5mN/8eul//Hrpf/x66X/8eul//FrZb/opSJ/4+RkP+Hm57/o8/O/7ft5v+37ebutu/nPwAA
        AAAAAAAARa2In0SuiVIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALTs
        5im27ebat+3m/7ft5v+p2NX/i6Sm/42Vlf+QjIr/jZeX/42pq/+u4Nz/t+3m/7ft5v+37eb/t+3m17fr
        5ScAAAAAAAAAABzG/wkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAKr/1Qa37OZutu3m6Lft5v+37eb/t+3m/7ft5v+37eb/t+3m/7ft5v+37eb/t+3m5rjs
        5Wyq/9UGAAAAAAAAAAAavPFuGbzx/hi88IkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC///8EuOzlRLfs5ZW37ea0t+3mybjt5si37ea0t+7llLfs
        5EOq//8DAAAAAAAAAAAAAAAAGrvyPBm88aEZvPH/GrzyvgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgv+8QGr/yFBq88W4au+4eAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////8A///8AD//+AAf//AAC//gAAf/wA
        AD/4AAA/8AAAH/AAAB/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/4AAAf+AAAH/wAAD/8AAA//gAAf/8A
        AO//gAH//+AHz//4H4//////////////////////
</value>
  </data>
</root>